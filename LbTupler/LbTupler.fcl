# A script to run an analysis module: LbTupler. You may want to
# compare this script with ${LARSIM_DIR}/job/prodsingle.fcl; in
# particular, in this script there are no output streams because the
# module doesn't write any events, just histograms or n-tuples.

# See <https://cdcvs.fnal.gov/redmine/projects/larsoftsvn/wiki/Running_Jobs> for 
# more information on the structure of .fcl files. 

# The following line will have to be changed to match your experiment;
# e.g., "services_lbne.fcl"
#include "services_lbne.fcl"

process_name: LbTupler

services:
{
  # Load the service that manages root files for histograms.
  # Any histograms or n-tuples that you create in the program will be
  # written to this file. You can override the file name with the -T
  # option on the command line; e.g.,
  #  lar -c LbTupler.fcl -T myhistograms.root -s myinput.root

  TFileService: { fileName: "LbTupler.root" }

  # This constrols the display in the output of how long each job step
  # takes for each event. The only parameter you can put in here is
  # "summaryOnly: true" if you want to suppress this output.

  Timing:       {}

  # ART native random number generator. Normally this is only needed
  # for simulations, but you never know.

  RandomNumberGenerator: {} 

  # This parameter controls the level of descriptive output from
  # various LArSoft modules. For a list of different message levels,
  # see ${LARDATA_DIR}/job/messageservice.fcl. For most jobs this is
  # set to standard_warning; here it is set to standard_info because I
  # write some LogInfo messages in the analysis module for
  # demonstration purposes.

  message:      @local::standard_info

  user:         @local::lbne35t_simulation_services 

}
services.user.ExptGeoHelperInterface: @local::lbne_geometry_helper
services.user.Geometry.GDML: "lbne35t4apa_v3.gdml"
services.user.Geometry.ROOT: "lbne35t4apa_v3.gdml"
services.user.Geometry.SortingParameters.DetectorVersion: "lbne35t4apa_v3"

# The 'source' section tells the script to expect an input file with art::Event records.
# Note that the name of the input file is not included here. You specify that on the
# command line when you run this script; e.g.,
#    lar -c LbTupler.fcl -s myinput.root
# The file "myinput.root" is assumed to have been created by a previous LArSoft job.

source:
{
  module_type: RootInput

  # Number of events to analyze; "-1" means all of the events in the input
  # file. You can override this value with the "-n" option on the command line. 
  maxEvents:  -1 

  # I've commented this out, but if you really want to include the name of
  # an input file in this script, here's how you do it.
  # fileNames: ["myinput.root"]
}

# This is empty, because we're not writing any art::Events to an output file. 
outputs:{}

# The 'physics' section defines and configures some modules to do work on each event.
# First modules are defined; they are scheduled later. Modules are grouped by type.
physics:
{
  # Define the variables we'll need to run for this analysis program.
  analyzers:
  {
    # This name defines a job step below, and will appear as a directory 
    # in the output histogram file. 
    LbTupler: 
    {

      # The "module_type" tells us which module to run. The name here
      # matches the name supplied to DEFINE_ART_MODULE near the end of
      # LbTupler_module.cc.
      module_type:     "LbTupler"

      # Debug level: 0 for silent, 5 for very noisy
      DebugLevel:   2

      # The input parameters for our LbTupler module. Compare
      # the names you see here with the reconfigure method in
      # LbTupler.cxx. You will want to add/remove/rename the
      # example parameters below to suit your task.
      #
      # If you are reading any objects created by the simulation, then
      # don't change the value of this parameter. This is the name of
      # the 'producer' that ran the simulation module in a previous
      # job. An example of a job file that runs the simulation is
      # ${LARSIM_DIR}/job/prodsingle.fcl; look for "largeant:". It's
      # unlikely that anyone would change the name of this producer.
      SimulationLabel: "largeant"

      # Hits can be created by more than one module in
      # ${LARRECO_DIR}/source/HitFinder. For this example, I picked
      # the one that's usually run first.
      HitLabel:        "gaushit"

      # The same for clusters:
      ClusterLabel:    "fuzzycluster"

      # The same for raw digits.
      RawDigitLabel:   "daq"

      # In this example, which primary particle(s) we'll focus on in an event.
      # PDG code 13 = mu-.
      PDGcode:          13

      # dx used for the dE/dx calculation; units are cm. 
      # 0 for just one bin
      #BinSize:          0.3
      BinSize:          0.0

      # Max number of sim channels.
      SimChannelSize:     10000

      # TDC range for histograms.
      TdcTickMin:      0
      TdcTickMax:   3200

    }
  }

  # Schedule job step(s) for execution by defining the analysis module
  # for this job. An 'analysis' module (as opposed to a 'producer' or
  # a 'filter') does not alter the contents of events in the input
  # file, nor does it create any events as output. Any step names
  # listed here must match a name in the 'analyzers' section above.

  analysis: [ LbTupler ]

  # "end_paths" is a keyword and contains the modules that do not modify the art::Event;
  # i.e., analyzers and output streams. 

  end_paths: [ analysis ]  
}

